@charset "UTF-8";
/*! normalize.css v2.1.2 | MIT License | git.io/normalize */
/* ==========================================================================
   HTML5 display definitions
   ========================================================================== */
/**
 * Correct `block` display not defined in IE 8/9.
 */
article,
aside,
details,
figcaption,
figure,
footer,
header,
hgroup,
main,
nav,
section,
summary {
  display: block; }

/**
 * Correct `inline-block` display not defined in IE 8/9.
 */
audio,
canvas,
video {
  display: inline-block; }

/**
 * Prevent modern browsers from displaying `audio` without controls.
 * Remove excess height in iOS 5 devices.
 */
audio:not([controls]) {
  display: none;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
[hidden] {
  display: none; }

/* ==========================================================================
   Base
   ========================================================================== */
/**
 * 1. Set default font family to sans-serif.
 * 2. Prevent iOS text size adjust after orientation change, without disabling
 *    user zoom.
 */
html {
  font-family: sans-serif;
  /* 1 */
  -ms-text-size-adjust: 100%;
  /* 2 */
  -webkit-text-size-adjust: 100%;
  /* 2 */ }

/**
 * Remove default margin.
 */
body {
  margin: 0; }

/* ==========================================================================
   Links
   ========================================================================== */
/**
 * Address `outline` inconsistency between Chrome and other browsers.
 */
a:focus {
  outline: thin dotted; }

/**
 * Improve readability when focused and also mouse hovered in all browsers.
 */
a:active,
a:hover {
  outline: 0; }

/* ==========================================================================
   Typography
   ========================================================================== */
/**
 * Address variable `h1` font-size and margin within `section` and `article`
 * contexts in Firefox 4+, Safari 5, and Chrome.
 */
h1 {
  font-size: 2em;
  margin: 0.67em 0; }

/**
 * Address styling not present in IE 8/9, Safari 5, and Chrome.
 */
abbr[title] {
  border-bottom: 1px dotted; }

/**
 * Address style set to `bolder` in Firefox 4+, Safari 5, and Chrome.
 */
b,
strong {
  font-weight: bold; }

/**
 * Address styling not present in Safari 5 and Chrome.
 */
dfn {
  font-style: italic; }

/**
 * Address differences between Firefox and other browsers.
 */
hr {
  -moz-box-sizing: content-box;
  box-sizing: content-box;
  height: 0; }

/**
 * Address styling not present in IE 8/9.
 */
mark {
  background: #ff0;
  color: #000; }

/**
 * Correct font family set oddly in Safari 5 and Chrome.
 */
code,
kbd,
pre,
samp {
  font-family: monospace, serif;
  font-size: 1em; }

/**
 * Improve readability of pre-formatted text in all browsers.
 */
pre {
  white-space: pre-wrap; }

/**
 * Set consistent quote types.
 */
q {
  quotes: "\201C" "\201D" "\2018" "\2019"; }

/**
 * Address inconsistent and variable font size in all browsers.
 */
small {
  font-size: 80%; }

/**
 * Prevent `sub` and `sup` affecting `line-height` in all browsers.
 */
sub,
sup {
  font-size: 75%;
  line-height: 0;
  position: relative;
  vertical-align: baseline; }

sup {
  top: -0.5em; }

sub {
  bottom: -0.25em; }

/* ==========================================================================
   Embedded content
   ========================================================================== */
/**
 * Remove border when inside `a` element in IE 8/9.
 */
img {
  border: 0; }

/**
 * Correct overflow displayed oddly in IE 9.
 */
svg:not(:root) {
  overflow: hidden; }

/* ==========================================================================
   Figures
   ========================================================================== */
/**
 * Address margin not present in IE 8/9 and Safari 5.
 */
figure {
  margin: 0; }

/* ==========================================================================
   Forms
   ========================================================================== */
/**
 * Define consistent border, margin, and padding.
 */
fieldset {
  border: 1px solid #c0c0c0;
  margin: 0 2px;
  padding: 0.35em 0.625em 0.75em; }

/**
 * 1. Correct `color` not being inherited in IE 8/9.
 * 2. Remove padding so people aren't caught out if they zero out fieldsets.
 */
legend {
  border: 0;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Correct font family not being inherited in all browsers.
 * 2. Correct font size not being inherited in all browsers.
 * 3. Address margins set differently in Firefox 4+, Safari 5, and Chrome.
 */
button,
input,
select,
textarea {
  font-family: inherit;
  /* 1 */
  font-size: 100%;
  /* 2 */
  margin: 0;
  /* 3 */ }

/**
 * Address Firefox 4+ setting `line-height` on `input` using `!important` in
 * the UA stylesheet.
 */
button,
input {
  line-height: normal; }

/**
 * Address inconsistent `text-transform` inheritance for `button` and `select`.
 * All other form control elements do not inherit `text-transform` values.
 * Correct `button` style inheritance in Chrome, Safari 5+, and IE 8+.
 * Correct `select` style inheritance in Firefox 4+ and Opera.
 */
button,
select {
  text-transform: none; }

/**
 * 1. Avoid the WebKit bug in Android 4.0.* where (2) destroys native `audio`
 *    and `video` controls.
 * 2. Correct inability to style clickable `input` types in iOS.
 * 3. Improve usability and consistency of cursor style between image-type
 *    `input` and others.
 */
button,
html input[type="button"],
input[type="reset"],
input[type="submit"] {
  -webkit-appearance: button;
  /* 2 */
  cursor: pointer;
  /* 3 */ }

/**
 * Re-set default cursor for disabled elements.
 */
button[disabled],
html input[disabled] {
  cursor: default; }

/**
 * 1. Address box sizing set to `content-box` in IE 8/9.
 * 2. Remove excess padding in IE 8/9.
 */
input[type="checkbox"],
input[type="radio"] {
  box-sizing: border-box;
  /* 1 */
  padding: 0;
  /* 2 */ }

/**
 * 1. Address `appearance` set to `searchfield` in Safari 5 and Chrome.
 * 2. Address `box-sizing` set to `border-box` in Safari 5 and Chrome
 *    (include `-moz` to future-proof).
 */
input[type="search"] {
  -webkit-appearance: textfield;
  /* 1 */
  -moz-box-sizing: content-box;
  -webkit-box-sizing: content-box;
  /* 2 */
  box-sizing: content-box; }

/**
 * Remove inner padding and search cancel button in Safari 5 and Chrome
 * on OS X.
 */
input[type="search"]::-webkit-search-cancel-button,
input[type="search"]::-webkit-search-decoration {
  -webkit-appearance: none; }

/**
 * Remove inner padding and border in Firefox 4+.
 */
button::-moz-focus-inner,
input::-moz-focus-inner {
  border: 0;
  padding: 0; }

/**
 * 1. Remove default vertical scrollbar in IE 8/9.
 * 2. Improve readability and alignment in all browsers.
 */
textarea {
  overflow: auto;
  /* 1 */
  vertical-align: top;
  /* 2 */ }

/* ==========================================================================
   Tables
   ========================================================================== */
/**
 * Remove most spacing between table cells.
 */
table {
  border-collapse: collapse;
  border-spacing: 0; }

/* Neat 1.7.0.pre
 * http://neat.bourbon.io
 * Copyright 2012-2014 thoughtbot, inc.
 * MIT License */
/**
 * Returns a media context (media query / grid context) that can be stored in a variable and passed to `media()` as a single-keyword argument. Media contexts defined using `new-breakpoint` are used by the visual grid, as long as they are defined before importing Neat.
 *
 * @param {List} $query
 *   - A list of media query features and values. Each `$feature` should have a corresponding `$value`. If there is only a single `$value` in `$query`, `$default-feature` is going to be used. The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`). For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
 *
 * @param {Number (unitless)} $total-columns ($grid-columns)
 *   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
 *
 * @example scss - Usage
 *   $mobile: new-breakpoint(max-width 480px 4);
 *
 *   .element {
 *     @include media($mobile) {
 *       @include span-columns(4);
 *     }
 *   }
 *
 * @example css - CSS Output
 *   @media screen and (max-width: 480px) {
 *     .element {
 *       display: block;
 *       float: left;
 *       margin-right: 7.42297%;
 *       width: 100%;
 *     }
 *     .element:last-child {
 *       margin-right: 0;
 *     }
 *   }
 */
/**
 * Sets the relative width of a single grid column. The unit used should be the same one used to define `$gutter`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with a `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * Sets the relative width of a single grid gutter. The unit used should be the same one used to define `$column`. To learn more about golden-ratio() see [Bourbon docs](http://bourbon.io/docs/#golden-ratio). Set with the `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * Sets the total number of columns in the grid. Its value can be overridden inside a media query using the `media()` mixin. Set with the `!global` flag.
 *
 * @type Number (Unitless)
 */
/**
 * Sets the max-width property of the element that includes `outer-container()`. To learn more about `em()` see [Bourbon docs](http://bourbon.io/docs/#px-to-em). Set with the `!global` flag.
 *
 * @type Number (Unit)
 */
/**
 * When set to true, it sets the box-sizing property of all elements to `border-box`. Set with a `!global` flag.
 *
 * @type Bool
 *
 * @example css - CSS Output
 *   * {
 *     -webkit-box-sizing: border-box;
 *     -moz-box-sizing: border-box;
 *     box-sizing: border-box;
 *   }
 */
/**
 * Sets the default [media feature](http://www.w3.org/TR/css3-mediaqueries/#media) that `media()` and `new-breakpoint()` revert to when only a breakpoint value is passed. Set with a `!global` flag.
 *
 * @type String
 */
/**
 * Sets the default layout direction of the grid. Can be `LTR` or `RTL`. Set with a `!global` flag.
 *
 * @type String
 */
/**
 * Displays the visual grid when set to true. The overlaid grid may be few pixels off depending on the browser's rendering engine and pixel rounding algorithm. Set with the `!global` flag.
 *
 * @type Bool
 */
/**
 * Sets the visual grid color. Set with `!global` flag.
 *
 * @type Color
 */
/**
 * Sets the `z-index` property of the visual grid. Can be `back` (behind content) or `front` (in front of content). Set with `!global` flag.
 *
 * @type String
 */
/**
 * Sets the opacity property of the visual grid. Set with `!global` flag.
 *
 * @type Number (unitless)
 */
/**
 * Disable all deprecation warnings. Defaults to `false`. Set with a `!global` flag.
 *
 * @type Bool
 */
html {
  -webkit-box-sizing: border-box;
  -moz-box-sizing: border-box;
  box-sizing: border-box; }

*, *:before, *:after {
  -webkit-box-sizing: inherit;
  -moz-box-sizing: inherit;
  box-sizing: inherit; }

/**
 * Removes the element's gutter margin, regardless of its position in the grid hierarchy or display property. It can target a specific element, or every `nth-child` occurrence. Works only with `block` layouts.
 *
 * @param {List} $query (block)
 *   List of arguments. Supported arguments are `nth-child` selectors (targets a specific pseudo element) and `auto` (targets `last-child`).
 *
 *   When passed an `nth-child` argument of type `*n` with `block` display, the omega mixin automatically adds a clear to the `*n+1` th element. Note that composite arguments such as `2n+1` do not support this feature.
 *
 *   **Deprecation warning**: The omega mixin will no longer take a `$direction` argument. To change the layout direction, use `row($direction)` or set `$default-layout-direction` instead.
 *
 * @example scss - Usage
 *   .element {
 *     @include omega;
 *   }
 *
 *   .nth-element {
 *     @include omega(4n);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     margin-right: 0;
 *   }
 *
 *   .nth-element:nth-child(4n) {
 *     margin-right: 0;
 *   }
 *
 *   .nth-element:nth-child(4n+1) {
 *     clear: left;
 *   }
 */
/**
 * Makes an element a outer container by centring it in the viewport, clearing its floats, and setting its `max-width`.
 * Although optional, using `outer-container` is recommended. The mixin can be called on more than one element per page, as long as they are not nested.
 *
 * @param {Number (unit)} $local-max-width ($max-width)
 *   Max width to be applied to the element. Can be a percentage or a measure.
 *
 * @example scss - Usage
 *   .element {
 *     @include outer-container(100%);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     *zoom: 1;
 *     max-width: 100%;
 *     margin-left: auto;
 *     margin-right: auto;
 *   }
 *
 *   .element:before, .element:after {
 *     content: " ";
 *     display: table;
 *   }
 *
 *   .element:after {
 *     clear: both;
 *   }
 */
/**
 * Specifies the number of columns an element should span. If the selector is nested the number of columns of its parent element should be passed as an argument as well.
 *
 * @param {List} $span
 *   A list containing `$columns`, the unitless number of columns the element spans (required), and `$container-columns`, the number of columns the parent element spans (optional).
 *
 *   If only one value is passed, it is assumed that it's `$columns` and that that `$container-columns` is equal to `$grid-columns`, the total number of columns in the grid.
 *
 *   The values can be separated with any string such as `of`, `/`, etc.
 *
 * @param {String} $display (block)
 *   Sets the display property of the element. By default it sets the display propert of the element to `block`.
 *
 *   If passed `block-collapse`, it also removes the margin gutter by adding it to the element width.
 *
 *   If passed `table`, it sets the display property to `table-cell` and calculates the width of the element without taking gutters into consideration. The result does not align with the block-based grid.
 *
 * @example scss - Usage
 *   .element {
 *     @include span-columns(6);

 *    .nested-element {
 *      @include span-columns(2 of 6);
 *    }
 *  }
 *
 * @example css - CSS Output
 *   .element {
 *     display: block;
 *     float: left;
 *     margin-right: 2.35765%;
 *     width: 48.82117%;
 *   }
 *
 *   .element:last-child {
 *     margin-right: 0;
 *   }
 *
 *   .element .nested-element {
 *     display: block;
 *     float: left;
 *     margin-right: 4.82916%;
 *     width: 30.11389%;
 *   }
 *
 *   .element .nested-element:last-child {
 *     margin-right: 0;
 *   }
 */
/**
 * Designates the element as a row of columns in the grid layout. It clears the floats on the element and sets its display property. Rows can't be nested, but there can be more than one row element—with different display properties—per layout.
 *
 * @param {String} $display (default)
 *   Sets the display property of the element and the display context that will be used by its children. Can be `block` or `table`.
 *
 * @param {String} $direction ($default-layout-direction)
 *   Sets the layout direction. Can be `LTR` (left-to-right) or `RTL` (right-to-left).
 *
 * @example scss - Usage
 *   .element {
 *     @include row();
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     *zoom: 1;
 *     display: block;
 *   }
 *
 *  .element:before, .element:after {
 *    content: " ";
 *    display: table;
 *  }
 *
 *  .element:after {
 *    clear: both;
 *  }
 */
/**
 * Translates an element horizontally by a number of columns. Positive arguments shift the element to the active layout direction, while negative ones shift it to the opposite direction.
 *
 * @param {Number (unitless)} $n-columns (1)
 *   Number of columns by which the element shifts.
 *
 * @example scss - Usage
 *   .element {
 *     @include shift(-3);
 *   }
 *
 * @example css - CSS output
 *   .element {
 *     margin-left: -25.58941%;
 *   }
 */
/**
 * Translates an element horizontally by a number of columns, in a specific nesting context.
 *
 * @param {List} $shift
 *   A list containing the number of columns to shift (`$columns`) and the number of columns of the parent element (`$container-columns`).
 *
 *   The two values can be separated with any string such as `of`, `/`, etc.
 *
 * @example scss - Usage
 *   .element {
 *     @include shift(-3 of 6);
 *   }
 *
 * @example css - CSS output
 *   .element {
 *     margin-left: -52.41458%;
 *   }
 */
/**
 * Adds padding to the element.
 *
 * @param {List} $padding (flex-gutter())
 *   A list of padding value(s) to use. Passing `default` in the list will result in using the gutter width as a padding value.
 *
 * @example scss - Usage
 *   .element {
 *     @include pad(30px -20px 10px default);
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     padding: 30px -20px 10px 2.35765%;
 *   }
 */
/**
 * Forces the element to fill its parent container.
 *
 * @example scss - Usage
 *   .element {
 *     @include fill-parent;
 *   }
 *
 * @example css - CSS Output
 *   .element {
 *     width: 100%;
 *     -webkit-box-sizing: border-box;
 *     -moz-box-sizing: border-box;
 *     box-sizing: border-box;
 *   }
 */
/**
 * Outputs a media-query block with an optional grid context (the total number of columns used in the grid).
 *
 * @param {List} $query
 *   A list of media query features and values, where each `$feature` should have a corresponding `$value`.
 *   For a list of valid values for `$feature`, click [here](http://www.w3.org/TR/css3-mediaqueries/#media1).
 *
 *   If there is only a single `$value` in `$query`, `$default-feature` is going to be used.
 *
 *   The number of total columns in the grid can be set by passing `$columns` at the end of the list (overrides `$total-columns`).
 *
 *
 * @param {Number (unitless)} $total-columns ($grid-columns)
 *   - Number of columns to use in the new grid context. Can be set as a shorthand in the first parameter.
 *
 * @example scss - Usage
 *   .responsive-element {
 *      @include media(769px) {
 *        @include span-columns(6);
 *      }
 *   }
 *
 *  .new-context-element {
 *    @include media(min-width 320px max-width 480px, 6) {
 *      @include span-columns(6);
 *    }
 *  }
 *
 * @example css - CSS Output
 *  @media screen and (min-width: 769px) {
 *    .responsive-element {
 *      display: block;
 *      float: left;
 *      margin-right: 2.35765%;
 *      width: 48.82117%;
 *    }
 *
 *    .responsive-element:last-child {
 *      margin-right: 0;
 *    }
 *  }
 *
 *  @media screen and (min-width: 320px) and (max-width: 480px) {
 *    .new-context-element {
 *      display: block;
 *      float: left;
 *      margin-right: 4.82916%;
 *      width: 100%;
 *    }
 *
 *    .new-context-element:last-child {
 *      margin-right: 0;
 *    }
 *  }
 */
/**
 * Resets the active display property to `block`. Particularly useful when changing the display property in a single row.
 *
 * @example scss - Usage
 *   .element {
 *     @include row(table);
 *     // Context changed to table display
 *   }
 *
 *   @include reset-display;
 *   // Context is reset to block display
 */
/**
 * Resets the active layout direction to the default value set in `$default-layout-direction`. Particularly useful when changing the layout direction in a single row.
 *
 * @example scss - Usage
 *   .element {
 *     @include row($direction: RTL);
 *     // Context changed to right-to-left
 *   }
 *
 *   @include reset-layout-direction;
 *   // Context is reset to left-to-right
 */
/**
 * Resets both the active layout direction and the active display property.
 *
 * @example scss - Usage
 *   .element {
 *     @include row(table, RTL);
 *     // Context changed to table table and right-to-left
 *   }
 *
 *   @include reset-all;
 *   // Context is reset to block display and left-to-right
 */
/**
 * Changes the display property used by other mixins called in the code block argument.
 *
 * @param {String} $display (block)
 *   Display value to be used within the block. Can be `table` or `block`.
 *
 * @example scss
 *   @include display(table) {
 *    .display-table {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css
 *   .display-table {
 *      display: table-cell;
 *      ...
 *   }
 */
/**
 * Changes the direction property used by other mixins called in the code block argument.
 *
 * @param {String} $direction (left-to-right)
 *   Layout direction to be used within the block. Can be `left-to-right` or `right-to-left`.
 *
 * @example scss - Usage
 *   @include direction(right-to-left) {
 *    .right-to-left-block {
 *      @include span-columns(6);
 *     }
 *   }
 *
 * @example css - CSS Output
 *   .right-to-left-block {
 *     float: right;
 *      ...
 *   }
 */
@font-face {
  font-family: 'sans';
  src: url("../fonts/sans-regular-webfont.eot");
  src: url("../fonts/sans-regular-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/sans-regular-webfont.woff2") format("woff2"), url("../fonts/sans-regular-webfont.woff") format("woff"), url("../fonts/sans-regular-webfont.ttf") format("truetype"), url("../fonts/sans-regular-webfont.svg#sansregular") format("svg");
  font-weight: 400;
  font-style: normal; }
@font-face {
  font-family: 'sans';
  src: url("../fonts/sans-medium-webfont.eot");
  src: url("../fonts/sans-medium-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/sans-medium-webfont.woff2") format("woff2"), url("../fonts/sans-medium-webfont.woff") format("woff"), url("../fonts/sans-medium-webfont.ttf") format("truetype"), url("../fonts/sans-medium-webfont.svg#sansmedium") format("svg");
  font-weight: 600;
  font-style: normal; }
@font-face {
  font-family: 'sans';
  src: url("../fonts/sans-bold-webfont.eot");
  src: url("../fonts/sans-bold-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/sans-bold-webfont.woff2") format("woff2"), url("../fonts/sans-bold-webfont.woff") format("woff"), url("../fonts/sans-bold-webfont.ttf") format("truetype"), url("../fonts/sans-bold-webfont.svg#sansbold") format("svg");
  font-weight: 800;
  font-style: normal; }
@font-face {
  font-family: 'serif';
  src: url("../fonts/serif-regular-webfont.eot");
  src: url("../fonts/serif-regular-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/serif-regular-webfont.woff2") format("woff2"), url("../fonts/serif-regular-webfont.woff") format("woff"), url("../fonts/serif-regular-webfont.ttf") format("truetype"), url("../fonts/serif-regular-webfont.svg#serifregular") format("svg");
  font-weight: 400;
  font-style: normal; }
@font-face {
  font-family: 'serif';
  src: url("../fonts/serif-italic-webfont.eot");
  src: url("../fonts/serif-italic-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/serif-italic-webfont.woff2") format("woff2"), url("../fonts/serif-italic-webfont.woff") format("woff"), url("../fonts/serif-italic-webfont.ttf") format("truetype"), url("../fonts/serif-italic-webfont.svg#serifitalic") format("svg");
  font-weight: 400;
  font-style: italic; }
@font-face {
  font-family: 'serif';
  src: url("../fonts/serif-bold-webfont.eot");
  src: url("../fonts/serif-bold-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/serif-bold-webfont.woff2") format("woff2"), url("../fonts/serif-bold-webfont.woff") format("woff"), url("../fonts/serif-bold-webfont.ttf") format("truetype"), url("../fonts/serif-bold-webfont.svg#serifbold") format("svg");
  font-weight: 800;
  font-style: normal; }
@font-face {
  font-family: 'serif';
  src: url("../fonts/serif-bolditalic-webfont.eot");
  src: url("../fonts/serif-bolditalic-webfont.eot?#iefix") format("embedded-opentype"), url("../fonts/serif-bolditalic-webfont.woff2") format("woff2"), url("../fonts/serif-bolditalic-webfont.woff") format("woff"), url("../fonts/serif-bolditalic-webfont.ttf") format("truetype"), url("../fonts/serif-bolditalic-webfont.svg#serifbold_italic") format("svg");
  font-weight: 800;
  font-style: italic; }
* {
  -webkit-font-smoothing: antialiased;
  text-rendering: optimizeLegibility; }

img {
  max-width: 100%;
  height: auto; }

body {
  color: rgba(0, 0, 0, 0.87);
  font-size: 80%;
  line-height: 1.5;
  font-family: "sans", sans-serif;
  font-weight: 400;
  transition: all 0.3s ease; }
  @media screen and (min-width: 36em) {
    body {
      font-size: 90%; } }
  @media screen and (min-width: 48em) {
    body {
      font-size: 100%; } }
  @media screen and (min-width: 80em) {
    body {
      font-size: 110%; } }

section {
  max-width: 100%;
  margin-left: auto;
  margin-right: auto;
  overflow: auto; }
  section:after {
    content: "";
    display: table;
    clear: both; }
  section.main {
    background: url(../img/featured.png) no-repeat right top fixed;
    background-size: cover;
    background-attachment: scroll;
    padding: 1em; }
    @media screen and (min-width: 48em) {
      section.main {
        padding: 2.3576515979%; } }
    @media screen and (min-width: 85em) {
      section.main {
        background: url(../img/featured-2.png) no-repeat right top fixed;
        background-size: cover;
        background-attachment: scroll; } }
    section.main > div {
      padding: 1em;
      /*
      @include media(48*$base) {
      	@include pad(default);
      }
      */
      border: 0.25em rgba(0, 0, 0, 0.87) solid;
      max-width: 25em;
      float: left;
      display: block;
      margin-right: 2.3576515979%;
      width: 100%; }
      section.main > div:last-child {
        margin-right: 0; }
      @media screen and (min-width: 30em) {
        section.main > div {
          float: left;
          display: block;
          margin-right: 2.3576515979%;
          width: 82.9403914003%; }
          section.main > div:last-child {
            margin-right: 0; } }
      @media screen and (min-width: 50em) {
        section.main > div {
          float: left;
          display: block;
          margin-right: 2.3576515979%;
          width: 40.2913699012%; }
          section.main > div:last-child {
            margin-right: 0; } }
    section.main p.summary {
      font-family: "serif", serif;
      -webkit-font-feature-settings: "liga";
      -moz-font-feature-settings: "liga";
      -ms-font-feature-settings: "liga";
      font-feature-settings: "liga";
      font-style: normal;
      font-weight: 400;
      font-size: 1.5em;
      color: rgba(0, 0, 0, 0.87);
      line-height: 1.2;
      margin: 0.5em 0; }

h1 {
  font-family: "sans", sans-serif;
  font-weight: 800;
  font-size: 1.7em;
  color: rgba(0, 0, 0, 0.87);
  line-height: 1.285;
  letter-spacing: 0.25em;
  margin: 0.5em 0 1.3em; }
  @media screen and (min-width: 30em) {
    h1 {
      margin: 0.7em 0 1.7em; } }

form {
  margin-bottom: 1em; }
  form input {
    appearance: none;
    border: none;
    margin: 0;
    padding: 0;
    border-bottom: 2px rgba(0, 0, 0, 0.24) solid;
    font-family: "sans", sans-serif;
    font-weight: 600;
    font-size: 1em;
    color: rgba(0, 0, 0, 0.24);
    line-height: 1.25em;
    letter-spacing: 0.0625em;
    background: none;
    text-transform: uppercase;
    padding-bottom: 0.375em;
    border-radius: 0;
    width: 70%; }
    form input:focus {
      outline: none;
      border-bottom: 2px rgba(0, 0, 0, 0.87) solid;
      color: rgba(0, 0, 0, 0.87); }
  form button {
    appearance: none;
    background: none;
    border: none;
    padding: 0;
    padding-top: 0.875em;
    font-family: "sans", sans-serif;
    font-weight: 800;
    font-size: 1em;
    color: rgba(0, 0, 0, 0.87);
    line-height: 20px;
    letter-spacing: 0.0625em;
    text-transform: uppercase; }
    form button::after {
      font-family: "sans", sans-serif;
      content: "\2192";
      text-indent: -9999px;
      color: transparent;
      width: 1em;
      height: 0.875em;
      background: url(../img/rarr.svg) center center no-repeat;
      background-size: 100%;
      margin-left: 0.75em; }

.floatlabel {
  padding-top: 1.5em !important; }

label.label-floatlabel {
  color: rgba(0, 0, 0, 0.87) !important;
  font-family: "sans", sans-serif;
  font-weight: 600;
  letter-spacing: 0.125em;
  text-transform: uppercase;
  left: 0 !important; }

footer.nav {
  position: relative;
  margin: 0;
  width: 100%;
  overflow: auto; }
  footer.nav figure {
    position: relative;
    float: left;
    overflow: hidden;
    /*
    		min-width: 320px;
    		max-height: 360px;
    */
    width: 100%;
    background: rgba(0, 0, 0, 0.87);
    text-align: left;
    cursor: pointer; }
    @media screen and (min-width: 30em) {
      footer.nav figure {
        width: 50%; } }
    footer.nav figure img {
      position: relative;
      display: block;
      min-height: 100%;
      min-width: 100%;
      height: auto;
      opacity: 0.54; }
    footer.nav figure figcaption {
      padding: 2em;
      color: black;
      text-transform: uppercase;
      font-size: 1.25em;
      -webkit-backface-visibility: hidden;
      backface-visibility: hidden; }
      footer.nav figure figcaption::before, footer.nav figure figcaption::after {
        pointer-events: none; }
      footer.nav figure figcaption, footer.nav figure figcaption > a {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%; }
      footer.nav figure figcaption > a {
        z-index: 1000;
        text-indent: 200%;
        white-space: nowrap;
        font-size: 0;
        opacity: 0; }
    footer.nav figure h2 {
      font-family: "sans", sans-serif;
      font-weight: 600;
      font-size: 1.25em;
      color: #FFFFFF;
      line-height: 0.875em;
      letter-spacing: 0.125em; }
      @media screen and (min-width: 26em) {
        footer.nav figure h2 {
          line-height: 1.5em; } }
    footer.nav figure p, footer.nav figure h2 {
      margin: 0; }
    footer.nav figure p {
      letter-spacing: 1px;
      font-size: 68.5%; }

/*---------------*/
/***** Duke *****/
/*---------------*/
figure.effect-duke {
  background: black;
  max-height: 15em;
  min-height: 5em; }
  @media screen and (min-width: 30em) {
    figure.effect-duke {
      min-height: 6.75em; } }

figure.effect-duke img,
figure.effect-duke p {
  -webkit-transition: opacity 1s, -webkit-transform 0.75s;
  transition: opacity 1s, transform 0.75s; }

figure.effect-duke img.color {
  opacity: 0;
  -webkit-transition: opacity 1s, -webkit-transform 0.75s;
  transition: opacity 1s, transform 0.75s;
  -webkit-transform: translateY(-100%);
  transform: translateY(-100%); }

figure.effect-duke:hover img.bw {
  opacity: 0;
  -webkit-transform: scale3d(1.03, 1.03, 1);
  transform: scale3d(1.03, 1.03, 1); }

figure.effect-duke:hover img.color {
  opacity: 1;
  -webkit-transform: scale3d(1.03, 1.03, 1) translateY(-97%);
  transform: scale3d(1.03, 1.03, 1) translateY(-97%); }

figure.effect-duke h2 {
  transition: all 1s ease;
  color: white; }

figure.effect-duke p {
  text-transform: none;
  font-size: 90%;
  opacity: 0; }

figure.effect-duke:hover h2,
figure.effect-duke:hover p {
  opacity: 1;
  color: black;
  text-shadow: 0 0 16px rgba(255, 255, 255, 0.54); }

/* Media queries */
@media screen and (max-width: 50em) {
  .content {
    padding: 0 10px; }

  .grid figure {
    display: inline-block;
    float: none;
    margin: 10px auto;
    width: 100%; } }
